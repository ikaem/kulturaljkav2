{"version":3,"sources":["components/SummaryCard/SummaryCard.js","components/Home/Home.js","components/DetailedCard/DetailedCard.js","components/Navigation/Navigation.js","components/AddUpdateArtist/AddUpdateArtist.js","components/SigninRegister/SigninRegister.js","App.js","serviceWorker.js","index.js"],"names":["SummaryCard","currentArtist","onSetStateProperty","image","alt","name","genre","src","style","width","height","type","value","onClick","console","log","Home","artists","summaryCards","map","artist","key","id","web","DetailedCard","loggedUser","city","submittedby","submittedon","href","Date","toLocaleString","Navigation","setCurrentRoute","setInitialState","listStyleType","charAt","toUpperCase","slice","AddUpdateArtist","props","onArtistChangeHandler","event","setState","Object","assign","state","target","onSubmitForm","preventDefault","currentRoute","obsoleteArtist","fetchArtist","onEndpointFetch","then","response","message","data","catch","err","lastupdatedon","lastupdatedby","this","onSubmit","htmlFor","required","onChange","React","Component","SigninRegister","onChangeHandler","email","password","fetchUser","user","App","method","param","fetch","headers","body","JSON","stringify","json","setLoggedUser","setCurrentArtist","submittedBy","submittedOn","lastUpdatedOn","lastUpdatedBy","setMessage","property","routeSwitcher","Boolean","window","location","hostname","match","ReactDOM","render","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abc70cee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SummaryCard = ({currentArtist, onSetStateProperty}) => {\r\n    const {image, alt, name, genre} = currentArtist;\r\n    \r\n    return (\r\n        <div>\r\n            <h1>{name}</h1>\r\n            <img \r\n            src={image} \r\n            alt={alt}\r\n            style={{width:\"500px\", height:\"auto\"}}\r\n            />\r\n            <p>Žanr: <strong>{genre}</strong></p>\r\n            <input \r\n            type=\"button\" \r\n            value=\"Detaljnije\"\r\n            onClick={()=> {\r\n                onSetStateProperty(\"currentRoute\", \"band\")\r\n                onSetStateProperty(\"currentArtist\", currentArtist)\r\n                console.log(currentArtist);\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SummaryCard;","import React from 'react';\r\nimport SummaryCard from '../SummaryCard/SummaryCard';\r\n\r\nconst Home = ({artists, currentArtist, onSetStateProperty}) => {\r\n    \r\n\r\n    const summaryCards = artists.map(artist => {\r\n        return <SummaryCard\r\n                key={artist.id}\r\n                image={artist.image}\r\n                alt={artist.alt}\r\n                name={artist.name}\r\n                genre={artist.genre}\r\n                web={artist.web}\r\n                onSetStateProperty={onSetStateProperty}\r\n                currentArtist={artist}\r\n            />\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {summaryCards}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst DetailedCard = ({currentArtist, onSetStateProperty, loggedUser}) => {\r\n    const { name, image, alt, genre, city, web, submittedby, submittedon } = currentArtist;\r\n\r\n    return (\r\n        <div>\r\n            <img \r\n            src={image} \r\n            alt={alt}\r\n            style={{width:\"1000px\", height:\"auto\"}}\r\n            />\r\n            <h1>{name}</h1>\r\n            <p>Žanr: <strong>{genre}</strong></p>\r\n            <p>Dolaze iz : <strong>{city}</strong></p>\r\n            <p><a href={\"http://www.\" + web}>{web}</a></p>\r\n            <p>Postavio {submittedby} dana {new Date(submittedon).toLocaleString()}</p>\r\n            <input \r\n            onClick={() => \r\n                {\r\n                    if(loggedUser.name){\r\n                        onSetStateProperty(\"currentRoute\", \"updateartist\");\r\n                    }\r\n                    else{\r\n                        onSetStateProperty(\"currentRoute\", \"signin\");\r\n                        onSetStateProperty(\"message\", \"Molimo prijavite se\");\r\n                    }\r\n                }\r\n            }\r\n            type=\"button\" value=\"Uredi izvođača\"/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedCard;\r\n\r\n\r\n\r\n\r\n\r\n{/*             <div>\r\n                {albums.map(album => {\r\n                    return <div key={id++}>\r\n                                <ol>\r\n                                    {<p><strong>{album.title}</strong></p>}\r\n                                    {<p><strong>{album.year}</strong></p>}\r\n                                    {album.songs.map(song => {\r\n                                        return <li key={song}>{song}</li>\r\n                                    })}\r\n                                </ol>\r\n                                <hr/>\r\n                            </div>\r\n                })}\r\n            </div> */}","import React from \"react\";\r\n\r\nconst Navigation = ({setCurrentRoute, loggedUser, setInitialState, onSetStateProperty}) => {\r\n    return (\r\n        <div>\r\n                <ul>\r\n                    <li onClick={() => onSetStateProperty(\"currentRoute\", \"home\")}>Početna</li>\r\n                    {/* add loggedUser.name condition instead */}\r\n                    <li onClick={() =>loggedUser.name? onSetStateProperty(\"currentRoute\", \"addartist\"): onSetStateProperty(\"currentRoute\", \"signin\")}>Dodaj izvođača</li>\r\n\r\n{/*                     <li onClick={() => onSetStateProperty(\"currentRoute\", \"addartist\")}>Dodaj izvođača</li> */}\r\n\r\n                {!loggedUser.name?\r\n                        (<div><li onClick={() => onSetStateProperty(\"currentRoute\", \"signin\")}>Prijava</li>\r\n                        <li onClick={() => onSetStateProperty(\"currentRoute\", \"register\")}>Registracija</li></div>):\r\n                        (<div>\r\n                        <li onClick={() => {\r\n                            onSetStateProperty(\"loggedUser\");\r\n                            onSetStateProperty(\"currentArtist\");\r\n                            onSetStateProperty(\"currentRoute\", \"home\");\r\n\r\n                        }}>Odjava</li>\r\n                        <li style={{listStyleType: \"none\"}}>Dobar dan, <strong>{loggedUser.name.charAt(0).toUpperCase() + loggedUser.name.slice(1)}</strong>.</li></div>\r\n                        )\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n                </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nclass AddUpdateArtist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            artist: {\r\n                alt: \"i ovo ce trebati namjestiti - mozda cak staviti opis slike input.. ili maknuti skroz\",\r\n                city: \"\",\r\n                genre: \"\",\r\n/*                 id: Math.random(), */\r\n                image: \"\",\r\n                name: \"\",\r\n                submittedby: \"Kako ovo\",\r\n                submittedon: new Date(),\r\n                lastupdatedon: new Date(),\r\n                lastupdatedby: this.props.loggedUser.name,\r\n                web: \" \",\r\n            },\r\n            // this property i dont need, but im leaving it because i busted my ass working around it to update just artist property\r\n            currentRoute: \"\",\r\n            obsoleteArtist: \"\",\r\n        }\r\n/*         BINDING APPARENTLY NOT NEEDED BECAUSE WE ARE USING ARROW FUNCTIONS FOR EVENT FUNCTIONS HERE, SO THIS.AUTOMATICALLY REFERS TO THIS OBJECT?\r\n        this.onArtistChangeHandler = this.onArtistChangeHandler.bind(this);\r\n        this.onSubmitForm = this.onSubmitForm.bind(this); */\r\n    }\r\n    componentDidMount(){\r\n        this.props.currentRoute === \"addartist\"? this.setState({currentRoute: this.props.currentRoute}): this.setState({artist: Object.assign({},this.props.currentArtist), obsoleteArtist: Object.assign({},this.props.currentArtist), currentRoute: this.props.currentRoute})\r\n        console.log(this.state);\r\n    }\r\n\r\n    onArtistChangeHandler = (event) => {\r\n        //this.setState({artist: {[event.target.name]: event.target.value}})\r\n        this.setState({artist: Object.assign(this.state.artist, {[event.target.name]: event.target.value})})\r\n\r\n    }\r\n    onSubmitForm = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.currentRoute === \"addartist\"){\r\n            return this.state.artist; \r\n            // ovdje bi isto mogao ubaciti object.assign da dodam updateuser, createuser, i oba vremen isto....\r\n        }\r\n        else{\r\n            return Object.assign({}, this.state.obsoleteArtist, this.state.artist);\r\n        }\r\n    }\r\n\r\n    fetchArtist = (artist) => {\r\n        if(this.state.currentRoute === \"addartist\"){\r\n            this.props.onEndpointFetch(\"post\", \"/addartist\", artist)\r\n            .then(response => { \r\n                if(response.message === \"new artist successfully added\"){\r\n                    console.log(response);\r\n                    this.props.onSetStateProperty(\"artists\", response.data);\r\n                    this.props.onSetStateProperty(\"currentArtist\");\r\n                    this.props.onSetStateProperty(\"currentRoute\", \"home\");\r\n                }\r\n                else if(response.message === \"Please fill all fields\"){\r\n                    this.props.onSetStateProperty(\"message\", \"Ispunite sva polja\");\r\n                }\r\n                else{\r\n                    this.props.onSetStateProperty(\"message\", \"Umjetnik s tim imenom već postoji u bai podataka\");\r\n                }\r\n            })\r\n            .catch(err => console.log(err));                \r\n        }\r\n        else{\r\n            this.props.onEndpointFetch(\"put\", \"/updateartist\", artist)\r\n            .then(response => { \r\n                if(response.message === \"the artist was successfully updated\"){\r\n                    this.props.onSetStateProperty(\"artists\", response.data.artists);\r\n                    this.props.onSetStateProperty(\"currentArtist\", response.data.currentArtist);\r\n                    this.props.onSetStateProperty(\"currentRoute\", \"band\");\r\n                }\r\n                else if(response.message === \"data retrieval failed\"){\r\n                    this.props.onSetStateProperty(\"message\", \"Pojavio se problem s učitavanjem podataka, ali ažuriranje je uspjelo. Pokušajte osvježiti stranicu.\");\r\n                }\r\n                else{\r\n                    this.props.onSetStateProperty(\"message\", \"Ažuriranje nije uspjelo\");\r\n                }\r\n            })\r\n            .catch(err => console.log(err));                \r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n                <form\r\n                name=\"form\" onSubmit={(event) => this.fetchArtist(this.onSubmitForm(event))}>\r\n                    <legend>{this.state.currentRoute === \"addartist\" ? \"Dodaj izvođača\": \"Uredi izvođača\"}</legend>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"name\">Ime izvođača</label>\r\n                        <input \r\n                        required\r\n                        value={this.state.artist.name} onChange={this.onArtistChangeHandler} type=\"text\" name=\"name\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"image\">Poveznica na sliku</label>\r\n                        <input \r\n                        required \r\n                        value={this.state.artist.image} onChange={this.onArtistChangeHandler} type=\"text\" name=\"image\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"genre\">Žanr</label>\r\n                        <input \r\n                        required \r\n                        value={this.state.artist.genre} onChange={this.onArtistChangeHandler} type=\"text\" name=\"genre\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"city\">Izvođač dolazi iz:</label>\r\n                        <input \r\n                        required \r\n                        value={this.state.artist.city} \r\n                        onChange={this.onArtistChangeHandler}\r\n                        type=\"text\" name=\"city\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"web\">Poveznica na stranicu</label>\r\n                        <input \r\n                        required \r\n                        value={this.state.artist.web} onChange={this.onArtistChangeHandler} type=\"text\" name=\"web\" />\r\n                    </div>\r\n\r\n                    <input type=\"submit\" value=\"Pošalji\"/>\r\n                    {<div>{this.props.message}</div>}\r\n\r\n\r\n                </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddUpdateArtist;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {users} from '../../users'\r\n// ({currentRoute, onChangeRoute})\r\nclass SigninRegister extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            currentRoute: \"\",\r\n\r\n        }\r\n    /*  SEEMS LIKE NOT NEEDED EITHER, SAME AS WITH ARTIST FORM\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n        this.onSubmitForm = this.onSubmitForm.bind(this); */\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.setState({currentRoute: this.props.currentRoute})\r\n    }\r\n\r\n    onChangeHandler = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmitForm = (event) => {\r\n        event.preventDefault();\r\n        if(this.props.currentRoute === \"signin\"){\r\n            return {email: this.state.email, password: this.state.password}\r\n        }\r\n        else{\r\n            return {email: this.state.email, password: this.state.password, name: this.state.name}\r\n        }\r\n    }\r\n\r\n    fetchUser = (user) => {\r\n        if(this.state.currentRoute === \"signin\"){\r\n            // ovdje bi se jos dalo provjeravat po vrijednosti message elementa, i usmjeravati korinika prema tome... mozda cak samo prebaciti poruku sa servera do korisnika, na hrvatskom...\r\n            this.props.onEndpointFetch(\"post\", \"/login\", user)\r\n            .then(response => {\r\n                if(response.message === \"Login success\"){\r\n                    this.props.onSetStateProperty(\"loggedUser\", response.data);\r\n                    this.props.onSetStateProperty(\"currentRoute\", \"home\");\r\n                }\r\n                else{\r\n                    this.props.onSetStateProperty(\"message\", \"Nepostojeći korisnik ili netočna lozinka. Pokušajte ponovno\");\r\n                }\r\n            })\r\n            .catch(console.log);\r\n        }\r\n        else{\r\n            this.props.onEndpointFetch(\"post\", \"/register\", user)\r\n            .then(response => {\r\n                if(response.message === \"registration success\"){\r\n                    this.props.onSetStateProperty(\"loggedUser\", response.data);\r\n                    this.props.onSetStateProperty(\"currentRoute\", \"home\");\r\n                }\r\n                else if(response.message === \"email already in use\"){\r\n                    this.props.onSetStateProperty(\"message\", \"Unešeni email se već koristi\");\r\n                }\r\n                else{\r\n                    this.props.onSetStateProperty(\"message\", \"molimo ispunite sva polja\");\r\n                }\r\n            })\r\n            .catch(console.log);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form name=\"form\" onSubmit={(event) => this.fetchUser(this.onSubmitForm(event))}>\r\n                <legend>{this.props.currentRoute === \"signin\"? \"Prijava\": \"Registracija\"}</legend>\r\n                \r\n                {!(this.props.currentRoute === \"signin\")? (<div>\r\n                    <label htmlFor=\"name\">Ime</label>\r\n                    <input \r\n                    required\r\n                    value = {this.state.name}\r\n                    onChange={this.onChangeHandler}\r\n                    type=\"text\" \r\n                    name=\"name\" \r\n                    id=\"name\"/>\r\n                </div>): \"\"}\r\n\r\n                <div>\r\n                    <label htmlFor=\"password\">Lozinka</label>\r\n                    <input \r\n                    required\r\n                    value = {this.state.password}\r\n                    onChange={this.onChangeHandler}\r\n                    type=\"password\" \r\n                    name=\"password\" \r\n                    id=\"password\"/>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input \r\n                    required\r\n                    value = {this.state.email}\r\n                    onChange={this.onChangeHandler}\r\n                    type=\"email\" \r\n                    name=\"email\" \r\n                    id=\"email\"/>\r\n                </div>\r\n\r\n                {/* might change these submit types to some p element or something... */}\r\n                {this.props.currentRoute === \"signin\"? (\r\n                    <input \r\n                    type=\"submit\" \r\n                    value=\"Pošalji\"/>): \r\n                    (\r\n                    <input \r\n                    type=\"submit\" \r\n                    value=\"Register\"/>)}\r\n                {<div>{this.props.message}</div>}\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SigninRegister;","import React from 'react';\r\nimport './App.css';\r\n// import SummaryCard from './components/SummaryCard/SummaryCard';\r\nimport Home from './components/Home/Home';\r\n\r\n//import {artists} from './artists';\r\nimport DetailedCard from './components/DetailedCard/DetailedCard';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport AddUpdateArtist from './components/AddUpdateArtist/AddUpdateArtist';\r\nimport SigninRegister from './components/SigninRegister/SigninRegister';\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n      this.state = {\r\n        artists: [],\r\n        // currentRoute: \"home\",\r\n        currentRoute: \"home\",\r\n        // currentRoute: \"band\",\r\n        currentArtist: {\r\n          alt: \"\",\r\n          city: \"\",\r\n          genre: \"\",\r\n          id: \"\",\r\n          image: \"\",\r\n          name: \"\",\r\n          submittedBy: \"\",\r\n          submittedOn: \"\",\r\n          lastUpdatedOn: \"\",\r\n          lastUpdatedBy: \"\",\r\n          web: \"\",\r\n        },\r\n        loggedUser: {},\r\n        message: \"\",\r\n      };\r\n  }\r\n  componentDidMount(){\r\n    // ROOT GET\r\n    this.onEndpointFetch(\"get\",\"/\",)\r\n    .then(artists => this.onSetStateProperty(\"artists\", artists || [{\r\n        alt: \"\",\r\n        city: \"\",\r\n        genre: \"\",\r\n        id: \"\",\r\n        image: \"\",\r\n        name: \"\",\r\n        submittedBy: \"\",\r\n        submittedOn: \"\",\r\n        lastUpdatedOn: \"\",\r\n        lastUpdatedBy: \"\",\r\n        web: \"\",\r\n      }]));\r\n  }\r\n  onEndpointFetch = (method, param=\"\", data) => {\r\n    // https://kulturaljka-server.herokuapp.com/\r\n    return fetch(`https://kulturaljka-server.herokuapp.com${param}`,{\r\n      method: method,\r\n      headers: {\"Content-Type\": \"application/json\"},\r\n      body: JSON.stringify(data)\r\n    })\r\n    .then(response => response.json())\r\n    .catch(err => console.log(err));\r\n  }\r\n  setLoggedUser = (user={}) => {\r\n    this.setState({loggedUser: user});\r\n  }\r\n  setCurrentArtist = (artist={}) => {\r\n    this.setState({currentArtist: artist});\r\n  }\r\n  // dont think i need this one\r\n  setInitialState = () => {\r\n    this.setState({\r\n      artists: [],\r\n      // currentRoute: \"home\",\r\n      currentRoute: \"home\",\r\n      // currentRoute: \"band\",\r\n      currentArtist: {\r\n        alt: \"\",\r\n        city: \"\",\r\n        genre: \"\",\r\n        id: \"\",\r\n        image: \"\",\r\n        name: \"\",\r\n        submittedBy: \"\",\r\n        submittedOn: \"\",\r\n        lastUpdatedOn: \"\",\r\n        lastUpdatedBy: \"\",\r\n        web: \"\",\r\n      },\r\n      loggedUser: {},\r\n      message: \"\",\r\n    })\r\n  }\r\n  /* DONT NEED THIS ONE\r\n  setCurrentRoute = (route=\"home\") => {\r\n    this.setState({currentRoute: route});\r\n  } */\r\n  setMessage = (message=\"\") => {\r\n    this.setState({message: message});\r\n  }\r\n  \r\n  // ===  would this work instead of all setstate functions? with default value being \"\", even for objects? === //\r\n  onSetStateProperty = (property, value={}) => {\r\n    this.setState({[property]: value});\r\n    // just for testing\r\n    console.log(value)\r\n  }\r\n  // ======================================================================== // \r\n\r\n\r\n  routeSwitcher = () => {\r\n    switch(this.state.currentRoute){\r\n      case \"home\": \r\n        return <div>\r\n            <Home \r\n            artists={this.state.artists}\r\n            onSetStateProperty={this.onSetStateProperty}\r\n            key={this.state.currentRoute}\r\n            currentArtist={this.currentArtist}\r\n            />\r\n          </div>\r\n      case \"band\": \r\n        return <div>\r\n            <DetailedCard \r\n            currentArtist={this.state.currentArtist}\r\n            loggedUser={this.state.loggedUser}\r\n            onSetStateProperty={this.onSetStateProperty}\r\n            />\r\n          </div>\r\n      case \"addartist\":\r\n      case \"updateartist\": \r\n        return <div>\r\n          <AddUpdateArtist\r\n            currentArtist={this.state.currentArtist}\r\n            currentRoute={this.state.currentRoute}\r\n            key={this.state.currentRoute}\r\n            onEndpointFetch={this.onEndpointFetch}\r\n            onSetStateProperty={this.onSetStateProperty}\r\n            loggedUser={this.state.loggedUser}\r\n            message={this.state.message}\r\n            //\r\n          />\r\n          </div>\r\n      case \"signin\":\r\n      case \"register\": \r\n        return <div>\r\n          <SigninRegister\r\n            currentRoute={this.state.currentRoute}\r\n            currentArtist={this.state.currentArtist}\r\n            onEndpointFetch={this.onEndpointFetch}\r\n            loggedUser={this.state.loggedUser}\r\n            onSetStateProperty={this.onSetStateProperty}\r\n            message={this.state.message}\r\n            key={this.state.currentRoute}\r\n          />\r\n          </div>\r\n      default: \r\n        return null;\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>Kulturaljka</h1>\r\n        <Navigation\r\n          setCurrentRoute={this.setCurrentRoute}\r\n          loggedUser={this.state.loggedUser}\r\n          setInitialState={this.setInitialState}\r\n          onSetStateProperty={this.onSetStateProperty}\r\n        />\r\n{/*         \r\n        <Search/> */}\r\n        {this.routeSwitcher()}\r\n        <h6>{\"Zaštićen sadržaj se koristi za samoedukaciju i nije odobren od strane autora\"}</h6>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(<App className=\"App\"/>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}